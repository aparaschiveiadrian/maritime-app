// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250503164411_DDL__CreateVoyage")]
    partial class DDL__CreateVoyage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCountry"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdCountry");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("server.Models.Port", b =>
                {
                    b.Property<int>("IdPort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPort"));

                    b.Property<int>("IdCountry")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdPort");

                    b.HasIndex("IdCountry");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("server.Models.Ship", b =>
                {
                    b.Property<int>("IdShip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdShip"));

                    b.Property<decimal>("MaxSpeed")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdShip");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("server.Models.Voyage", b =>
                {
                    b.Property<int>("IdVoyage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVoyage"));

                    b.Property<int>("ArrivalPortId")
                        .HasColumnType("integer");

                    b.Property<int>("DeparturePortId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdShip")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("VoyageDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdVoyage");

                    b.HasIndex("ArrivalPortId");

                    b.HasIndex("DeparturePortId");

                    b.HasIndex("IdShip");

                    b.ToTable("Voyages");
                });

            modelBuilder.Entity("server.Models.Port", b =>
                {
                    b.HasOne("server.Models.Country", "Country")
                        .WithMany("Ports")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("server.Models.Voyage", b =>
                {
                    b.HasOne("server.Models.Port", "ArrivalPort")
                        .WithMany()
                        .HasForeignKey("ArrivalPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Port", "DeparturePort")
                        .WithMany()
                        .HasForeignKey("DeparturePortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Ship", "Ship")
                        .WithMany("Voyages")
                        .HasForeignKey("IdShip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalPort");

                    b.Navigation("DeparturePort");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("server.Models.Country", b =>
                {
                    b.Navigation("Ports");
                });

            modelBuilder.Entity("server.Models.Ship", b =>
                {
                    b.Navigation("Voyages");
                });
#pragma warning restore 612, 618
        }
    }
}
